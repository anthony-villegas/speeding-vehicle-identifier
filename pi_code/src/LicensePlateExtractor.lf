target Python;

reactor LicensePlateExtractor(target_coord(0.5, 0.5), min_AR(4), max_AR(5), contour_count(10), scale(1.0)) {
    preamble {=
        import cv2 as cv
        import numpy as np
        import imutils 
        class Image:
            def __init__(self, timestamp, filepath, body_string=None):
                self.timestamp = timestamp
                self.filepath = filepath
                self.body_string = body_string

        def rescaleImage(self, frame, scale=1.0):
            width = int(frame.shape[1] * scale)
            height = int(frame.shape[0] * scale)
            dimensions = (width, height)
            return self.cv.resize(frame, dimensions, interpolation=self.cv.INTER_AREA)

        def preprocess_image(self, image_address):
            image = self.rescaleImage(self.cv.imread(image_address), scale=1.0)
            grayscale = self.cv.cvtColor(image, self.cv.COLOR_BGR2GRAY)
            __, thresholded = self.cv.threshold(grayscale, 127, 255, 0)
            return grayscale, thresholded

        def get_contours(self, processed_image):
            contours = self.cv.findContours(processed_image, self.cv.RETR_EXTERNAL, self.cv.CHAIN_APPROX_SIMPLE)
            contours = self.imutils.grab_contours(contours)
            contours = sorted(contours, key = self.cv.contourArea, reverse = True)[:self.contour_count]
            return contours

        def find_plate(self, grayscale, contours):
            plate_contour = None
            plate_region = None
            for c in contours:
                (x , y, w, h) = self.cv.boundingRect(c)
                aspect_ratio = w / float(h)
                if aspect_ratio >= self.min_AR and aspect_ratio <= self.max_AR:
                    plate_contour = c
                    plate_region = grayscale[y:y+h, x:x+w]
                    plate_region = self.cv.threshold(plate_region, 0, 255, self.cv.THRESH_BINARY_INV | self.cv.THRESH_OTSU)[1]
                    break
            return plate_region
    =}

    input scene_image;
    output plate_image;

    reaction(scene_image) -> plate_image {=
        grayscale, thresholded =  self.preprocess_image(scene_image.value.filepath)
        contours = self.get_contours(thresholded)
        plate = self.find_plate(grayscale, contours)
        self.cv.imshow("plate", plate)
        #scene_image.value.body_string = self.cv.imencode(".jpg", plate)[1].tostring()
        plate_image.set(self.Image(scene_image.value.timestamp,
                                   scene_image.value.filepath,
                                   self.cv.imencode(".jpg", plate)[1].tostring()
            )
        )
        print(scene_image.value.timestamp)
        print("scene image processed")
    =}
}