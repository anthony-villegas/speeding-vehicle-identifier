target Python;

reactor Camera(exposure(3)) {
    preamble {=
        import cv2 as cv
        import time
        import sys
        
        class Image:
            def __init__(self, timestamp, image, body_string=None):
                self.timestamp = timestamp
                self.image = image
                self.body_string = body_string
    =}

    input trigger;
    input flash_enabled;
    state video_stream;
    output image;

    reaction(startup) {=
        self.video_stream = self.cv.VideoCapture(0)
        if self.video_stream.isOpened() is not True:
            sys.stderr.write("Couldn't open webcam")
            exit(1)
        self.video_stream.set(self.cv.CAP_PROP_FRAME_WIDTH, 640)
        self.video_stream.set(self.cv.CAP_PROP_FRAME_HEIGHT, 480)
    =}

    reaction(shutdown) {=
        self.video_stream.release()
        self.cv.destroyAllWindows()
    =}

    initial mode FlashDisabled {
        reaction(trigger) -> image {=
            timestamp = self.time.strftime("%Y_%m_%d_%H_%M_%S")
            ret, frame = self.video_stream.read()
            if ret is True:
                image.set(self.Image(timestamp, frame))
            
        =} deadline(20 msec) {=
            print("No Flash Deadline Missed\n")
        =}

        reaction(flash_enabled) -> FlashEnabled {=
            if flash_enabled.value:
                FlashEnabled.set()
        =}
    }

    mode FlashEnabled {
        reaction(trigger) -> image {=
            timestamp = self.time.strftime("%Y_%m_%d_%H_%M_%S")
            ret, frame = self.video_stream.read()            
            if ret is True:
                image.set(self.Image(timestamp, frame))

            print("Flash Picture!")
        =} deadline(20 msec) {=
            print("Flash Deadline missed\n")
        =}

        reaction(flash_enabled) -> FlashDisabled {=
            if not flash_enabled.value:
                FlashDisabled.set()
        =}
    }
}