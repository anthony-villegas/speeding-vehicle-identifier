target Python {
    files: "./camera.py"
}

reactor Camera(exposure(3)) {
    input trigger;
    input flash_enabled;
    state frame;
    state picamera_thread
    output image;
    physical action frame_capture_action

    preamble {=
        import cv2 as cv
        import time
        import sys
        import threading
        from camera import frame_capture
        
        class Image:
            def __init__(self, timestamp, image, body_string=None):
                self.timestamp = timestamp
                self.image = image
                self.body_string = body_string
    =}

    reaction(startup) -> frame_capture_action {=
        self.picamera_thread = self.threading.Thread(target=self.frame_capture, args=(frame_capture_action,))
        self.picamera_thread.start()
    =}

    reaction(frame_capture_action) {=
        self.frame = frame_capture_action.value
    =}

    initial mode FlashDisabled {
        reaction(trigger) -> image {=
            timestamp = self.time.strftime("%Y_%m_%d_%H_%M_%S")
            if self.frame is not None:
                image.set(self.Image(timestamp, self.frame))
                print("No flash picture")
            else:
                print("No frame")
            
        =} deadline(20 msec) {=
            print("No Flash Deadline Missed\n")
        =}

        reaction(flash_enabled) -> FlashEnabled {=
            if flash_enabled.value:
                FlashEnabled.set()
        =}
    }

    mode FlashEnabled {
        reaction(trigger) -> image {=
            timestamp = self.time.strftime("%Y_%m_%d_%H_%M_%S")
            if self.frame.value is not None:
                image.set(self.Image(timestamp, self.frame.value))
                print("Flash Picture!")
        =} deadline(20 msec) {=
            print("Flash Deadline missed\n")
        =}

        reaction(flash_enabled) -> FlashDisabled {=
            if not flash_enabled.value:
                FlashDisabled.set()
        =}
    }
}